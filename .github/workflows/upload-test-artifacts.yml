name: Upload Test Screenshots

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to link screenshots to'
        required: true
        type: number
      test_name:
        description: 'Name of the test run'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  upload-screenshots:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and organize screenshots
        run: |
          echo "📸 Finding test screenshots..."
          
          # Create timestamp-based directory for this upload
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          UPLOAD_DIR="uploaded-screenshots/issue-${{ github.event.inputs.issue_number }}/$TIMESTAMP"
          mkdir -p "$UPLOAD_DIR"
          
          # Look for screenshots in demo-screenshots directory for this issue first
          if [ -d "demo-screenshots/issue-${{ github.event.inputs.issue_number }}" ]; then
            echo "📁 Found demo-screenshots directory for issue #${{ github.event.inputs.issue_number }}"
            cp "demo-screenshots/issue-${{ github.event.inputs.issue_number }}"/*.png "$UPLOAD_DIR/" 2>/dev/null || echo "No PNG files in demo-screenshots"
            cp "demo-screenshots/issue-${{ github.event.inputs.issue_number }}"/*.jpg "$UPLOAD_DIR/" 2>/dev/null || echo "No JPG files in demo-screenshots"
          fi
          
          # Look for screenshots in test-artifacts directory for this issue  
          if [ -d "test-artifacts/issue-${{ github.event.inputs.issue_number }}" ]; then
            echo "📁 Found test-artifacts directory for issue #${{ github.event.inputs.issue_number }}"
            cp "test-artifacts/issue-${{ github.event.inputs.issue_number }}"/*.png "$UPLOAD_DIR/" 2>/dev/null || echo "No PNG files in test-artifacts"
            cp "test-artifacts/issue-${{ github.event.inputs.issue_number }}"/*.jpg "$UPLOAD_DIR/" 2>/dev/null || echo "No JPG files in test-artifacts"
          fi
          
          # Find the most recent test screenshots (migration test directory)
          LATEST_TEST_DIR=$(find . -name "migration-*" -type d | sort -r | head -1)
          
          if [ ! -z "$LATEST_TEST_DIR" ] && [ -d "$LATEST_TEST_DIR" ]; then
            echo "📁 Found latest test directory: $LATEST_TEST_DIR"
            cp "$LATEST_TEST_DIR"/*.png "$UPLOAD_DIR/" 2>/dev/null || echo "No PNG files in test directory"
            cp "$LATEST_TEST_DIR"/*.jpg "$UPLOAD_DIR/" 2>/dev/null || echo "No JPG files in test directory"
          fi
          
          # Also copy any standalone screenshots from recent tests
          find . -maxdepth 1 -name "*.png" -newer /tmp/recent 2>/dev/null | head -5 | while read file; do
            cp "$file" "$UPLOAD_DIR/" 2>/dev/null || true
          done
          
          echo "📋 Files to upload:"
          ls -la "$UPLOAD_DIR/" || echo "No files found"
          
          echo "UPLOAD_DIR=$UPLOAD_DIR" >> $GITHUB_ENV
          
      - name: Upload screenshots via Contents API
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const uploadDir = process.env.UPLOAD_DIR;
            const issueNumber = ${{ github.event.inputs.issue_number }};
            
            try {
              const files = fs.readdirSync(uploadDir);
              const imageFiles = files.filter(f => f.endsWith('.png') || f.endsWith('.jpg'));
              
              if (imageFiles.length === 0) {
                console.log('⚠️ No screenshots found to upload');
                process.exit(1);
              }
              
              console.log(`📸 Uploading ${imageFiles.length} screenshots via Contents API...`);
              
              for (const file of imageFiles) {
                const filePath = path.join(uploadDir, file);
                const fileContent = fs.readFileSync(filePath);
                const base64Content = fileContent.toString('base64');
                const apiPath = `${uploadDir}/${file}`;
                
                console.log(`Uploading: ${apiPath}`);
                
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: apiPath,
                  message: `📸 Upload screenshot: ${file} for issue #${issueNumber}`,
                  content: base64Content,
                  branch: 'main'
                });
              }
              
              console.log('✅ All screenshots uploaded via Contents API');
              
            } catch (error) {
              console.error('❌ Error uploading screenshots:', error.message);
              process.exit(1);
            }
          
      - name: Post issue comment with base64 embedded screenshots
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const issueNumber = ${{ github.event.inputs.issue_number }};
            const uploadDir = process.env.UPLOAD_DIR;
            const owner = context.repo.owner;
            const repo = 'biz-buddy-ally-now';  // Target main app repo
            
            // Since the repo is private, raw URLs won't work publicly
            // Use base64 embedding for smaller files, or file links for larger ones
            let screenshotMarkdown = '';
            
            try {
              const files = fs.readdirSync(uploadDir);
              const imageFiles = files.filter(f => f.endsWith('.png') || f.endsWith('.jpg')).slice(0, 3); // Limit to 3 files to avoid size issues
              
              if (imageFiles.length > 0) {
                for (const file of imageFiles) {
                  const filePath = path.join(uploadDir, file);
                  const stats = fs.statSync(filePath);
                  
                  // Only embed files smaller than 50KB to avoid GitHub comment limits
                  if (stats.size < 50 * 1024) {
                    try {
                      const imageBuffer = fs.readFileSync(filePath);
                      const base64Image = imageBuffer.toString('base64');
                      const mimeType = file.endsWith('.png') ? 'image/png' : 'image/jpeg';
                      const dataUrl = `data:${mimeType};base64,${base64Image}`;
                      screenshotMarkdown += `**${file}**:\n![${file}](${dataUrl})\n\n`;
                    } catch (err) {
                      screenshotMarkdown += `**${file}**: ⚠️ File too large for embedding\n\n`;
                    }
                  } else {
                    screenshotMarkdown += `**${file}**: 📁 File available in repository (${Math.round(stats.size/1024)}KB)\n\n`;
                  }
                }
              }
            } catch (error) {
              console.log('Could not read screenshot files:', error.message);
              screenshotMarkdown = '⚠️ Screenshots were uploaded but could not be embedded. Check the repository for files.';
            }
            
            const commentBody = `## 📸 Test Screenshots Uploaded

**Test Name**: ${{ github.event.inputs.test_name }}
**Uploaded**: ${new Date().toISOString()}

${screenshotMarkdown}

---
📁 **Repository Path**: \`${uploadDir}\`  
🧹 **Auto-cleanup**: Screenshots older than 10 days are automatically removed  
⚠️ **Note**: Repository is private, so raw URLs don't work publicly`;
            
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issueNumber,
              body: commentBody
            });
            
            console.log('✅ Issue comment posted with embedded screenshots');