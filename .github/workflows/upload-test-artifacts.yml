name: Upload Test Screenshots

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to link screenshots to'
        required: true
        type: number
      test_name:
        description: 'Name of the test run'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  upload-screenshots:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and organize screenshots
        run: |
          echo "📸 Finding test screenshots..."
          
          # Create timestamp-based directory for this upload
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          UPLOAD_DIR="uploaded-screenshots/issue-${{ github.event.inputs.issue_number }}/$TIMESTAMP"
          mkdir -p "$UPLOAD_DIR"
          
          # Look for screenshots in demo-screenshots directory for this issue first
          if [ -d "demo-screenshots/issue-${{ github.event.inputs.issue_number }}" ]; then
            echo "📁 Found demo-screenshots directory for issue #${{ github.event.inputs.issue_number }}"
            cp "demo-screenshots/issue-${{ github.event.inputs.issue_number }}"/*.png "$UPLOAD_DIR/" 2>/dev/null || echo "No PNG files in demo-screenshots"
            cp "demo-screenshots/issue-${{ github.event.inputs.issue_number }}"/*.jpg "$UPLOAD_DIR/" 2>/dev/null || echo "No JPG files in demo-screenshots"
          fi
          
          # Look for screenshots in test-artifacts directory for this issue  
          if [ -d "test-artifacts/issue-${{ github.event.inputs.issue_number }}" ]; then
            echo "📁 Found test-artifacts directory for issue #${{ github.event.inputs.issue_number }}"
            cp "test-artifacts/issue-${{ github.event.inputs.issue_number }}"/*.png "$UPLOAD_DIR/" 2>/dev/null || echo "No PNG files in test-artifacts"
            cp "test-artifacts/issue-${{ github.event.inputs.issue_number }}"/*.jpg "$UPLOAD_DIR/" 2>/dev/null || echo "No JPG files in test-artifacts"
          fi
          
          # Find the most recent test screenshots (migration test directory)
          LATEST_TEST_DIR=$(find . -name "migration-*" -type d | sort -r | head -1)
          
          if [ ! -z "$LATEST_TEST_DIR" ] && [ -d "$LATEST_TEST_DIR" ]; then
            echo "📁 Found latest test directory: $LATEST_TEST_DIR"
            cp "$LATEST_TEST_DIR"/*.png "$UPLOAD_DIR/" 2>/dev/null || echo "No PNG files in test directory"
            cp "$LATEST_TEST_DIR"/*.jpg "$UPLOAD_DIR/" 2>/dev/null || echo "No JPG files in test directory"
          fi
          
          # Also copy any standalone screenshots from recent tests
          find . -maxdepth 1 -name "*.png" -newer /tmp/recent 2>/dev/null | head -5 | while read file; do
            cp "$file" "$UPLOAD_DIR/" 2>/dev/null || true
          done
          
          echo "📋 Files to upload:"
          ls -la "$UPLOAD_DIR/" || echo "No files found"
          
          echo "UPLOAD_DIR=$UPLOAD_DIR" >> $GITHUB_ENV
          
      - name: Commit screenshots to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Screenshot Upload Bot"
          
          if [ -d "$UPLOAD_DIR" ] && [ "$(ls -A $UPLOAD_DIR)" ]; then
            git add "$UPLOAD_DIR"
            git commit -m "📸 Upload screenshots for issue #${{ github.event.inputs.issue_number }}

            Test: ${{ github.event.inputs.test_name }}
            Uploaded: $(ls $UPLOAD_DIR | wc -l) files
            Auto-cleanup: Files will be pruned after 10 days"
            git push
            echo "✅ Screenshots committed to repository"
          else
            echo "⚠️ No screenshots found to upload"
            exit 1
          fi
          
      - name: Post issue comment with embedded screenshots
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const issueNumber = ${{ github.event.inputs.issue_number }};
            const uploadDir = process.env.UPLOAD_DIR;
            const owner = context.repo.owner;
            const repo = 'biz-buddy-ally-now';  // Target main app repo
            
            // Get list of uploaded files
            let screenshotMarkdown = '';
            
            try {
              const files = fs.readdirSync(uploadDir);
              const imageFiles = files.filter(f => f.endsWith('.png') || f.endsWith('.jpg'));
              
              if (imageFiles.length > 0) {
                screenshotMarkdown = imageFiles.map(file => {
                  const rawUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/main/${uploadDir}/${file}`;
                  return `### 📸 ${file}\n![${file}](${rawUrl})\n`;
                }).join('\n');
              }
            } catch (error) {
              console.log('Could not read screenshot files:', error.message);
              screenshotMarkdown = '⚠️ Screenshots were uploaded but could not be embedded. Check the repository for files.';
            }
            
            const commentBody = `## 📸 Test Screenshots Uploaded
            
            **Test Name**: ${{ github.event.inputs.test_name }}
            **Uploaded**: ${new Date().toISOString()}
            
            ${screenshotMarkdown}
            
            ---
            📁 **Repository Path**: \`${uploadDir}\`
            🧹 **Auto-cleanup**: Screenshots older than 10 days are automatically removed
            ✅ **Immediate Access**: Screenshots are embedded above for instant viewing`;
            
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issueNumber,
              body: commentBody
            });
            
            console.log('✅ Issue comment posted with embedded screenshots');